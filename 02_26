{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPoAO8T4q3BrsQFMZYT7WhV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/guidoliveira/guidoliveira/blob/main/02_26\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "sop3wpC-GDQc",
        "outputId": "94b5cee0-55f5-4d57-f8c0-774e12fb9c4b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#creating dummy data\n",
        "import pandas as pd\n",
        "dummy = pd.DataFrame([[3.70,2.70,9.10],\n",
        "              [7.80, 8.00, 1.50],\n",
        "              [8.90, 1.00, 2.70],\n",
        "             [7.00, 1.00, 9.00],\n",
        "             [3.40, 2.00, 5.00]], index = ['Gabriela', 'Luiz Felipe', 'Patrícia', 'Ovídio', 'Leonor'], columns =['matemática', 'física', 'química'])\n",
        "\n",
        "import numpy as np\n",
        "from scipy.spatial import distance_matrix\n",
        "#distance_matrix from scipy.spatial would calculate the distance between data point based on euclidean distance, and I round it to 2 decimal\n",
        "pd.DataFrame(np.round(distance_matrix(dummy.values, dummy.values), 2), index = dummy.index, columns = dummy.index)\n",
        "#importing linkage and denrogram from scipy\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram\n",
        "import matplotlib.pyplot as plt\n",
        "#creating dendrogram based on the dummy data with single linkage criterion\n",
        "den = dendrogram(linkage(dummy, method='single'), \n",
        "labels = dummy.index)\n",
        "plt.ylabel('Euclidean Distance', fontsize = 14)\n",
        "plt.title('Dendrogram of the Dummy Data')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "oazg-NE5JceZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}